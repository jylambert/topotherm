[build-system]
requires = ["setuptools >= 64"]
build-backend = "setuptools.build_meta"

[project]

name = "topotherm"
version = "0.4.1"
description = "A package to design district heating networks"
readme = "README.md"

authors = [
    { name = "Jerry Lambert", email = "jerry.lambert@tum.de"},
    { name = "Amedeo Ceruti", email = "amedeo.ceruti@tum.de"}
]

classifiers=[
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3",
        "Topic :: Scientific/Engineering :: District Heating",
    ]

keywords = [
    "district heating",
    "optimization",
    "Linear Programming",
    "Mixed Integer Linear Programming"
    ]

license = {file = "LICENSE"}

requires-python = ">=3.10"
dependencies = [
    "numpy",
    "pandas",
    "scipy",
    "networkx",
    "matplotlib",
    "pyomo > 6.0",
    "pyarrow >= 14.0.1",
    "Pillow >= 10.2.0",
    "pyyaml",
    "pydantic",
    "geopandas",
    "shapely"
]

[tool.setuptools]
packages = ["topotherm"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pydocstyle]
convention = "numpy"  # Since you're using numpy format

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true


[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[project.optional-dependencies]
dev = [
    "pytest",
    "ruff",
    "mypy",
]
docs = [
  "sphinx>=7",
  "sphinx-rtd-theme",
  "sphinx-copybutton",
  "sphinx-autoapi",
  "myst-parser",
  "linkify-it-py",
  "sphinx-autodoc-typehints",
  "matplotlib",           # if you want .. plot:: support
  "sphinxcontrib-mermaid" # for mermaid diagrams
  
]